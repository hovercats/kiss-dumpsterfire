|/
|\ISS Repo												  https://kisslinux.org
_______________________________________________________________________________


Kiss-dumpsterfire 
_______________________________________________________________________________

A KISS repository which aims to provide a fully functional static system, from
core, to a working browser and everything in between. 
We also aim to use alternative, and minimal tools, whenever such alternatives 
are viable.


Overview
_______________________________________________________________________________

This repository is highly experimental, and is not to be considered a viable
option for daily usage.

* All of core will build statically.
  * refer to below for how to not bork your system when converting
    * Ive only covered some core packages, but the principle applies across
	    all of your system.
    * Said packages are only used as a reference point, to give you a better
      idea on how to avoid breaking your system
	* there is no grub, please create your own boot entries in bios/uefi

* Almost all of extra/xorg builds statically
	* xorg-server is an exception
		* if you know how to manually load xorg's modules, please let me know.
		* because, without a way to do so, a static xorg-server is unsuable
	* mesa is an exception.
    * gives me issues with a static llvm core
    * seems to also give me issues with static gcc
	* check buildscript or git log for status

* Wayland is currently completely untested
  * use at your own risk

* Bin contains up-to-date static builds of some packages
  * Currently holds only a few packages, but I plan to add more bigger
	  packages, once I get by building them.
  * built with; C(XX)FLAGS="-Os -pipe -march=x86-64 -mtune=generic"
    * this is same as KISS' default


Converting to static
_______________________________________________________________________________

Converting your system to be statically linked, can have disaterous effects, if
you rebuild the correct package statically (i.e. zlib, which most of the system
usually links to). If youre really lucky, itll bork just about youre whole
system. Do youself a favor, and have a tarball at hand, to be able to recover,
if you bork your system more easily. 
Heres a reference for you to use;

* build things in reverse order of dependencies
	* by this, I mean, build from top, to bottom. 
	* if we're using gcc as an example;
		* gcc > binutils > byacc > flex > m4
		|* If you built binutils first, gcc would break, and leave you with a
		  useless compiler, unable to build anything, because the files it
		  needs, is now missing. building gcc first however, will work just fine
	* starting from the top, and working your way down the dependency list, is
	  the recommended way to go
    * however, theres nothing stopping you from building random packages
		  across your system statically, just prepare to unbreak alot packages
		  afterwards


Issues & PRs
_______________________________________________________________________________

Issues and PRs are welcome!
