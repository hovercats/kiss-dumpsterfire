|/
|\ISS Repo												  https://kisslinux.org
_______________________________________________________________________________


Kiss-dumpsterfire 
_______________________________________________________________________________

A KISS repository which aims to provide a fully functional static system, from
core, to a working browser and everything in between. 
We also aim to use alternative, and minimal tools, whenever such alternatives 
are viable.


Overview
_______________________________________________________________________________

This repository is highly experimental, and is not to be considered a viable
option for daily usage.

* All of core will build statically.
  * refer to below for how to not bork your system when converting
    * Ive only covered some core packages, but the principle applies across
	    all of your system.
    * Said packages are only used as a reference point, to give you a better
      idea on how to avoid breaking your system
	* Grub is intentionally left out. 
    * Create your own boot entries instead.
    * No need for efibootmgr etc.

* Extra
  * almost everything builds statically
	* check buildscript or git log for status

* Xorg
  * same as extra
  * mesa and xorg-server is an exception
    * needs more looking into

* Wayland
  * currently untested
  * use at your own risk

* Bin 
  * Contains up-to-date static builds of some packages
  * Currently holds only a few packages, but I plan to add more bigger
	  packages, once I get by building them.
  * built with; C(XX)FLAGS="-Os -pipe -march=x86-64 -mtune=generic"
    * this is same as KISS' default


Converting to static
_______________________________________________________________________________

Converting your system to static, can have disasterous effects, if the
*correct* package is built statically. (i.e. zlib will surely ruin your system)
Having an unpacked tarball will however save you in most situations.

For the actual convertion (taken into account that youre using a prebuilt
tarball, or an already working system); here is a reference to get you going:

* build in reverse order of normal buildorder
  * to further explain;
  * if $pkg has no reverse dependencies, it is safe to say you can build this
    package statically without breakage.
  * however, if $pkg has reverse dependencies, those will probably break, to
    some degree (this all depends on what role $pkg has in using said reverse
    dependencies). Rebuilding said reverse dependencies may or may not fix any
    issues, depending on $pkg's role. It may aswell also fail building, due to
    missing shared libs. it all depends ons $pkg's role.
 
  * lets give an example;
    * gcc depends on binutils. 
    * building binutils static will break gcc, but not vice versa.
    * this is because gcc is the end of the chain in this case.
    * to convert gcc + deps, we will have to start with gcc, 
      and work our way backwards. 
      * gcc > binutils > byacc/bison > flex > m4


Issues & PRs
_______________________________________________________________________________

Issues and PRs are welcome!
