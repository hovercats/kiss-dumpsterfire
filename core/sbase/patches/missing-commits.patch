From 00995639fe3b885494d7dfeda7af618ba018fdd1 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Sun, 4 Dec 2022 00:32:21 -0800
Subject: [PATCH 1/9] dd: Fix backwards comparison when handling short writes

ipos is always ahead of opos, so the left side of this condition
was never true. This only mattered when we get short writes, since
on EOF we always have less than a full output block, so it takes
only one normal write.
---
 dd.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dd.c b/dd.c
index 6061048..350843b 100644
--- a/dd.c
+++ b/dd.c
@@ -221,7 +221,7 @@ main(int argc, char *argv[])
 			else
 				ofull++;
 			opos += ret;
-		} while ((eof && ipos < opos) || (!eof && ipos - opos >= obs));
+		} while (ipos - opos >= (eof ? 1 : obs));
 		if (opos < ipos)
 			memmove(buf, buf + opos, ipos - opos);
 		ipos -= opos;
-- 
2.40.1


From fb16e7c6ad0e8d27cba8ee6279f71f88c7f95fd7 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Wed, 12 Apr 2023 20:13:51 -0700
Subject: [PATCH 2/9] dd: Consider block count in inner read loop

When ibs is smaller than obs, checking the block count in the outer
loop is not sufficient; we need to break out of the inner read loop
once we've read the specified number of blocks.

Thanks to phoebos for reporting this issue.
---
 dd.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/dd.c b/dd.c
index 350843b..36eb409 100644
--- a/dd.c
+++ b/dd.c
@@ -173,8 +173,12 @@ main(int argc, char *argv[])
 			eprintf("lseek:");
 		/* XXX: handle non-seekable files */
 	}
-	while (!eof && (count == -1 || ifull + ipart < count)) {
+	while (!eof) {
 		while (ipos - opos < obs) {
+			if (ifull + ipart == count) {
+				eof = 1;
+				break;
+			}
 			ret = read(ifd, buf + ipos, ibs);
 			if (ret == 0) {
 				eof = 1;
-- 
2.40.1


From 93f34c1840850b3d592df515563225bf91d7b457 Mon Sep 17 00:00:00 2001
From: Andrea Calligaris <recluse@email.it>
Date: Wed, 8 Feb 2023 17:35:08 +0100
Subject: [PATCH 3/9] ed: Fix 'w' command not respecting '-s' option

---
 ed.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/ed.c b/ed.c
index 8a0604e..b661ac5 100644
--- a/ed.c
+++ b/ed.c
@@ -642,7 +642,8 @@ dowrite(const char *fname, int trunc)
 	strcpy(savfname, fname);
 	modflag = 0;
 	curln = line;
-	printf("%zu\n", bytecount);
+	if (optdiag)
+		printf("%zu\n", bytecount);
 }
 
 static void
-- 
2.40.1


From 499c3b12272b09bf3450107daeb25a8d0282affe Mon Sep 17 00:00:00 2001
From: Andrea Calligaris <recluse@email.it>
Date: Wed, 25 Jan 2023 00:44:07 +0100
Subject: [PATCH 4/9] sort.1: fix typo

---
 sort.1 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/sort.1 b/sort.1
index 757aec5..8808e72 100644
--- a/sort.1
+++ b/sort.1
@@ -40,7 +40,7 @@ indicating the location of the disorder.
 Skip non-whitespace and non-alphanumeric characters.
 .It Fl f
 Ignore letter case when sorting.
-.It FL i
+.It Fl i
 Skip non-printable characters.
 .It Fl k Ar key
 Specify a key definition of the form
-- 
2.40.1


From 8dfcbf23b0b767f941d55364d8aff9785b7e91a5 Mon Sep 17 00:00:00 2001
From: Arthur Williams <taaparthur@disroot.org>
Date: Sun, 6 Mar 2022 04:14:01 -0800
Subject: [PATCH 5/9] cp: don't abort when src and dest file are the same

The POSIX spec gives many options on how to handle this case, but it
also states that cp (and mv) should continue with remaining operands
regardless. We used to exit immediately, which violates the spec.

This change makes cp/mv not exit immediately in this case and
also won't cause the return value to be non-zero.

From `man 1p cp`:
   If source_file references the same file as dest_file, cp may write
   a diagnostic message to standard error; it shall do nothing more
   with source_file and shall go on to any remaining files.
---
 libutil/fnck.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/libutil/fnck.c b/libutil/fnck.c
index 92da1f4..4f8875b 100644
--- a/libutil/fnck.c
+++ b/libutil/fnck.c
@@ -13,7 +13,8 @@ fnck(const char *a, const char *b,
 	    && !stat(b, &stb)
 	    && sta.st_dev == stb.st_dev
 	    && sta.st_ino == stb.st_ino) {
-		eprintf("%s -> %s: same file\n", a, b);
+		weprintf("%s -> %s: same file\n", a, b);
+		return;
 	}
 
 	if (fn(a, b, depth) < 0)
-- 
2.40.1


From df50727a08e3bf97a73dc42df3e15a1c21a339a8 Mon Sep 17 00:00:00 2001
From: Greg Reagle <greg.reagle@umbc.edu>
Date: Wed, 11 Aug 2021 11:47:04 -0400
Subject: [PATCH 6/9] refer to re_format(7) for BSDs

---
 grep.1 | 6 ++++--
 nl.1   | 3 ++-
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/grep.1 b/grep.1
index 0091916..cb9ae47 100644
--- a/grep.1
+++ b/grep.1
@@ -16,7 +16,8 @@
 searches the input files for lines that match the
 .Ar pattern ,
 a regular expression as defined in
-.Xr regex 7 .
+.Xr regex 7 or
+.Xr re_format 7 .
 By default each matching line is printed to stdout.
 If no
 .Ar file
@@ -83,7 +84,8 @@ An error occurred.
 .El
 .Sh SEE ALSO
 .Xr sed 1 ,
-.Xr regex 7
+.Xr regex 7 ,
+.Xr re_format 7
 .Sh STANDARDS
 The
 .Nm
diff --git a/nl.1 b/nl.1
index 5b30524..93c428c 100644
--- a/nl.1
+++ b/nl.1
@@ -63,7 +63,8 @@ This is the default.
 Only lines matching
 .Ar expr
 according to
-.Xr regex 7 .
+.Xr regex 7 or
+.Xr re_format 7 .
 .El
 .It Fl d Ar delim
 Set
-- 
2.40.1


From 7fc2f68aeccb7e488f7a6c6efbc4b82fa7a1452a Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Wed, 12 Apr 2023 21:20:56 -0700
Subject: [PATCH 7/9] libutf: Update to unicode 15.0.0

---
 libutf/isalpharune.c | 267 +++++++++++++++++++++++++++++++++----------
 libutf/isdigitrune.c |  14 +++
 libutf/lowerrune.c   |  57 +++++++--
 libutf/upperrune.c   |  25 +++-
 4 files changed, 295 insertions(+), 68 deletions(-)

diff --git a/libutf/isalpharune.c b/libutf/isalpharune.c
index 453be23..07811fc 100644
--- a/libutf/isalpharune.c
+++ b/libutf/isalpharune.c
@@ -18,6 +18,7 @@ static Rune alpha3[][2] = {
 	{ 0x066F, 0x0671 },
 	{ 0x06D3, 0x06D5 },
 	{ 0x0710, 0x0712 },
+	{ 0x0887, 0x0889 },
 	{ 0x09A8, 0x09AA },
 	{ 0x09B0, 0x09B2 },
 	{ 0x09DD, 0x09DF },
@@ -51,12 +52,9 @@ static Rune alpha3[][2] = {
 	{ 0x0DB1, 0x0DB3 },
 	{ 0x0DBB, 0x0DBD },
 	{ 0x0E30, 0x0E32 },
-	{ 0x0E82, 0x0E84 },
-	{ 0x0E88, 0x0E8A },
-	{ 0x0E97, 0x0E99 },
-	{ 0x0E9F, 0x0EA1 },
+	{ 0x0E82, 0x0E86 },
+	{ 0x0E8A, 0x0E8C },
 	{ 0x0EA3, 0x0EA7 },
-	{ 0x0EAB, 0x0EAD },
 	{ 0x0EB0, 0x0EB2 },
 	{ 0x0EC4, 0x0EC6 },
 	{ 0x0F47, 0x0F49 },
@@ -70,10 +68,10 @@ static Rune alpha3[][2] = {
 	{ 0x12D6, 0x12D8 },
 	{ 0x1310, 0x1312 },
 	{ 0x167F, 0x1681 },
-	{ 0x170C, 0x170E },
 	{ 0x176C, 0x176E },
 	{ 0x18A8, 0x18AA },
 	{ 0x1CEC, 0x1CEE },
+	{ 0x1CF3, 0x1CF5 },
 	{ 0x1F57, 0x1F5F },
 	{ 0x1FB4, 0x1FB6 },
 	{ 0x1FBC, 0x1FBE },
@@ -82,8 +80,6 @@ static Rune alpha3[][2] = {
 	{ 0x2113, 0x2115 },
 	{ 0x2124, 0x212A },
 	{ 0x212D, 0x212F },
-	{ 0x2C2E, 0x2C30 },
-	{ 0x2C5E, 0x2C60 },
 	{ 0x2D25, 0x2D27 },
 	{ 0x2DA6, 0x2DA8 },
 	{ 0x2DAE, 0x2DB0 },
@@ -94,10 +90,12 @@ static Rune alpha3[][2] = {
 	{ 0x2DD6, 0x2DD8 },
 	{ 0x309F, 0x30A1 },
 	{ 0x30FA, 0x30FC },
-	{ 0xA78E, 0xA790 },
+	{ 0x312F, 0x3131 },
+	{ 0xA7D1, 0xA7D5 },
 	{ 0xA801, 0xA803 },
 	{ 0xA805, 0xA807 },
 	{ 0xA80A, 0xA80C },
+	{ 0xA8FB, 0xA8FD },
 	{ 0xA9E4, 0xA9E6 },
 	{ 0xA9FE, 0xAA00 },
 	{ 0xAA42, 0xAA44 },
@@ -118,16 +116,45 @@ static Rune alpha3[][2] = {
 	{ 0x1003A, 0x1003C },
 	{ 0x1003D, 0x1003F },
 	{ 0x10340, 0x10342 },
+	{ 0x1057A, 0x1057C },
+	{ 0x1058A, 0x1058C },
+	{ 0x10592, 0x10594 },
+	{ 0x10595, 0x10597 },
+	{ 0x105A1, 0x105A3 },
+	{ 0x105B1, 0x105B3 },
+	{ 0x105B9, 0x105BB },
+	{ 0x10785, 0x10787 },
+	{ 0x107B0, 0x107B2 },
 	{ 0x10808, 0x1080A },
 	{ 0x10835, 0x10837 },
+	{ 0x108F2, 0x108F4 },
 	{ 0x10A13, 0x10A15 },
 	{ 0x10A17, 0x10A19 },
 	{ 0x10AC7, 0x10AC9 },
+	{ 0x111DA, 0x111DC },
 	{ 0x11211, 0x11213 },
+	{ 0x11286, 0x1128A },
+	{ 0x1128D, 0x1128F },
+	{ 0x1129D, 0x1129F },
 	{ 0x11328, 0x1132A },
 	{ 0x11330, 0x11332 },
 	{ 0x11333, 0x11335 },
 	{ 0x114C5, 0x114C7 },
+	{ 0x11913, 0x11915 },
+	{ 0x11916, 0x11918 },
+	{ 0x1193F, 0x11941 },
+	{ 0x119E1, 0x119E3 },
+	{ 0x11C08, 0x11C0A },
+	{ 0x11D06, 0x11D08 },
+	{ 0x11D09, 0x11D0B },
+	{ 0x11D65, 0x11D67 },
+	{ 0x11D68, 0x11D6A },
+	{ 0x11F02, 0x11F04 },
+	{ 0x11F10, 0x11F12 },
+	{ 0x16FE1, 0x16FE3 },
+	{ 0x1AFF3, 0x1AFF5 },
+	{ 0x1AFFB, 0x1AFFD },
+	{ 0x1AFFE, 0x1B000 },
 	{ 0x1D454, 0x1D456 },
 	{ 0x1D49C, 0x1D49E },
 	{ 0x1D4AC, 0x1D4AE },
@@ -150,6 +177,10 @@ static Rune alpha3[][2] = {
 	{ 0x1D788, 0x1D78A },
 	{ 0x1D7A8, 0x1D7AA },
 	{ 0x1D7C2, 0x1D7C4 },
+	{ 0x1E7E6, 0x1E7E8 },
+	{ 0x1E7EB, 0x1E7ED },
+	{ 0x1E7EE, 0x1E7F0 },
+	{ 0x1E7FE, 0x1E800 },
 	{ 0x1EE03, 0x1EE05 },
 	{ 0x1EE1F, 0x1EE21 },
 	{ 0x1EE22, 0x1EE24 },
@@ -187,9 +218,9 @@ static Rune alpha2[][2] = {
 	{ 0x03F7, 0x0481 },
 	{ 0x048A, 0x052F },
 	{ 0x0531, 0x0556 },
-	{ 0x0561, 0x0587 },
+	{ 0x0560, 0x0588 },
 	{ 0x05D0, 0x05EA },
-	{ 0x05F0, 0x05F2 },
+	{ 0x05EF, 0x05F2 },
 	{ 0x0620, 0x064A },
 	{ 0x066E, 0x066F },
 	{ 0x0671, 0x06D3 },
@@ -202,7 +233,10 @@ static Rune alpha2[][2] = {
 	{ 0x07F4, 0x07F5 },
 	{ 0x0800, 0x0815 },
 	{ 0x0840, 0x0858 },
-	{ 0x08A0, 0x08B2 },
+	{ 0x0860, 0x086A },
+	{ 0x0870, 0x0887 },
+	{ 0x0889, 0x088E },
+	{ 0x08A0, 0x08C9 },
 	{ 0x0904, 0x0939 },
 	{ 0x0958, 0x0961 },
 	{ 0x0971, 0x0980 },
@@ -250,19 +284,21 @@ static Rune alpha2[][2] = {
 	{ 0x0C0E, 0x0C10 },
 	{ 0x0C12, 0x0C28 },
 	{ 0x0C2A, 0x0C39 },
-	{ 0x0C58, 0x0C59 },
+	{ 0x0C58, 0x0C5A },
 	{ 0x0C60, 0x0C61 },
 	{ 0x0C85, 0x0C8C },
 	{ 0x0C8E, 0x0C90 },
 	{ 0x0C92, 0x0CA8 },
 	{ 0x0CAA, 0x0CB3 },
 	{ 0x0CB5, 0x0CB9 },
+	{ 0x0CDD, 0x0CDE },
 	{ 0x0CE0, 0x0CE1 },
 	{ 0x0CF1, 0x0CF2 },
-	{ 0x0D05, 0x0D0C },
+	{ 0x0D04, 0x0D0C },
 	{ 0x0D0E, 0x0D10 },
 	{ 0x0D12, 0x0D3A },
-	{ 0x0D60, 0x0D61 },
+	{ 0x0D54, 0x0D56 },
+	{ 0x0D5F, 0x0D61 },
 	{ 0x0D7A, 0x0D7F },
 	{ 0x0D85, 0x0D96 },
 	{ 0x0D9A, 0x0DB1 },
@@ -272,12 +308,9 @@ static Rune alpha2[][2] = {
 	{ 0x0E32, 0x0E33 },
 	{ 0x0E40, 0x0E46 },
 	{ 0x0E81, 0x0E82 },
-	{ 0x0E87, 0x0E88 },
-	{ 0x0E94, 0x0E97 },
-	{ 0x0E99, 0x0E9F },
-	{ 0x0EA1, 0x0EA3 },
-	{ 0x0EAA, 0x0EAB },
-	{ 0x0EAD, 0x0EB0 },
+	{ 0x0E86, 0x0E8A },
+	{ 0x0E8C, 0x0EA3 },
+	{ 0x0EA7, 0x0EB0 },
 	{ 0x0EB2, 0x0EB3 },
 	{ 0x0EC0, 0x0EC4 },
 	{ 0x0EDC, 0x0EDF },
@@ -307,39 +340,43 @@ static Rune alpha2[][2] = {
 	{ 0x1312, 0x1315 },
 	{ 0x1318, 0x135A },
 	{ 0x1380, 0x138F },
-	{ 0x13A0, 0x13F4 },
+	{ 0x13A0, 0x13F5 },
+	{ 0x13F8, 0x13FD },
 	{ 0x1401, 0x166C },
 	{ 0x166F, 0x167F },
 	{ 0x1681, 0x169A },
 	{ 0x16A0, 0x16EA },
 	{ 0x16F1, 0x16F8 },
-	{ 0x1700, 0x170C },
-	{ 0x170E, 0x1711 },
-	{ 0x1720, 0x1731 },
+	{ 0x1700, 0x1711 },
+	{ 0x171F, 0x1731 },
 	{ 0x1740, 0x1751 },
 	{ 0x1760, 0x176C },
 	{ 0x176E, 0x1770 },
 	{ 0x1780, 0x17B3 },
-	{ 0x1820, 0x1877 },
-	{ 0x1880, 0x18A8 },
+	{ 0x1820, 0x1878 },
+	{ 0x1880, 0x1884 },
+	{ 0x1887, 0x18A8 },
 	{ 0x18B0, 0x18F5 },
 	{ 0x1900, 0x191E },
 	{ 0x1950, 0x196D },
 	{ 0x1970, 0x1974 },
 	{ 0x1980, 0x19AB },
-	{ 0x19C1, 0x19C7 },
+	{ 0x19B0, 0x19C9 },
 	{ 0x1A00, 0x1A16 },
 	{ 0x1A20, 0x1A54 },
 	{ 0x1B05, 0x1B33 },
-	{ 0x1B45, 0x1B4B },
+	{ 0x1B45, 0x1B4C },
 	{ 0x1B83, 0x1BA0 },
 	{ 0x1BAE, 0x1BAF },
 	{ 0x1BBA, 0x1BE5 },
 	{ 0x1C00, 0x1C23 },
 	{ 0x1C4D, 0x1C4F },
 	{ 0x1C5A, 0x1C7D },
+	{ 0x1C80, 0x1C88 },
+	{ 0x1C90, 0x1CBA },
+	{ 0x1CBD, 0x1CBF },
 	{ 0x1CE9, 0x1CEC },
-	{ 0x1CEE, 0x1CF1 },
+	{ 0x1CEE, 0x1CF3 },
 	{ 0x1CF5, 0x1CF6 },
 	{ 0x1D00, 0x1DBF },
 	{ 0x1E00, 0x1F15 },
@@ -365,9 +402,7 @@ static Rune alpha2[][2] = {
 	{ 0x213C, 0x213F },
 	{ 0x2145, 0x2149 },
 	{ 0x2183, 0x2184 },
-	{ 0x2C00, 0x2C2E },
-	{ 0x2C30, 0x2C5E },
-	{ 0x2C60, 0x2CE4 },
+	{ 0x2C00, 0x2CE4 },
 	{ 0x2CEB, 0x2CEE },
 	{ 0x2CF2, 0x2CF3 },
 	{ 0x2D00, 0x2D25 },
@@ -388,11 +423,11 @@ static Rune alpha2[][2] = {
 	{ 0x309D, 0x309F },
 	{ 0x30A1, 0x30FA },
 	{ 0x30FC, 0x30FF },
-	{ 0x3105, 0x312D },
+	{ 0x3105, 0x312F },
 	{ 0x3131, 0x318E },
-	{ 0x31A0, 0x31BA },
+	{ 0x31A0, 0x31BF },
 	{ 0x31F0, 0x31FF },
-	{ 0xA000, 0xA48C },
+	{ 0x9FFF, 0xA48C },
 	{ 0xA4D0, 0xA4FD },
 	{ 0xA500, 0xA60C },
 	{ 0xA610, 0xA61F },
@@ -402,16 +437,17 @@ static Rune alpha2[][2] = {
 	{ 0xA6A0, 0xA6E5 },
 	{ 0xA717, 0xA71F },
 	{ 0xA722, 0xA788 },
-	{ 0xA78B, 0xA78E },
-	{ 0xA790, 0xA7AD },
-	{ 0xA7B0, 0xA7B1 },
-	{ 0xA7F7, 0xA801 },
+	{ 0xA78B, 0xA7CA },
+	{ 0xA7D0, 0xA7D1 },
+	{ 0xA7D5, 0xA7D9 },
+	{ 0xA7F2, 0xA801 },
 	{ 0xA803, 0xA805 },
 	{ 0xA807, 0xA80A },
 	{ 0xA80C, 0xA822 },
 	{ 0xA840, 0xA873 },
 	{ 0xA882, 0xA8B3 },
 	{ 0xA8F2, 0xA8F7 },
+	{ 0xA8FD, 0xA8FE },
 	{ 0xA90A, 0xA925 },
 	{ 0xA930, 0xA946 },
 	{ 0xA960, 0xA97C },
@@ -435,9 +471,8 @@ static Rune alpha2[][2] = {
 	{ 0xAB20, 0xAB26 },
 	{ 0xAB28, 0xAB2E },
 	{ 0xAB30, 0xAB5A },
-	{ 0xAB5C, 0xAB5F },
-	{ 0xAB64, 0xAB65 },
-	{ 0xABC0, 0xABE2 },
+	{ 0xAB5C, 0xAB69 },
+	{ 0xAB70, 0xABE2 },
 	{ 0xD7B0, 0xD7C6 },
 	{ 0xD7CB, 0xD7FB },
 	{ 0xF900, 0xFA6D },
@@ -473,31 +508,46 @@ static Rune alpha2[][2] = {
 	{ 0x10280, 0x1029C },
 	{ 0x102A0, 0x102D0 },
 	{ 0x10300, 0x1031F },
-	{ 0x10330, 0x10340 },
+	{ 0x1032D, 0x10340 },
 	{ 0x10342, 0x10349 },
 	{ 0x10350, 0x10375 },
 	{ 0x10380, 0x1039D },
 	{ 0x103A0, 0x103C3 },
 	{ 0x103C8, 0x103CF },
 	{ 0x10400, 0x1049D },
+	{ 0x104B0, 0x104D3 },
+	{ 0x104D8, 0x104FB },
 	{ 0x10500, 0x10527 },
 	{ 0x10530, 0x10563 },
+	{ 0x10570, 0x1057A },
+	{ 0x1057C, 0x1058A },
+	{ 0x1058C, 0x10592 },
+	{ 0x10594, 0x10595 },
+	{ 0x10597, 0x105A1 },
+	{ 0x105A3, 0x105B1 },
+	{ 0x105B3, 0x105B9 },
+	{ 0x105BB, 0x105BC },
 	{ 0x10600, 0x10736 },
 	{ 0x10740, 0x10755 },
 	{ 0x10760, 0x10767 },
+	{ 0x10780, 0x10785 },
+	{ 0x10787, 0x107B0 },
+	{ 0x107B2, 0x107BA },
 	{ 0x10800, 0x10805 },
 	{ 0x1080A, 0x10835 },
 	{ 0x10837, 0x10838 },
 	{ 0x1083F, 0x10855 },
 	{ 0x10860, 0x10876 },
 	{ 0x10880, 0x1089E },
+	{ 0x108E0, 0x108F2 },
+	{ 0x108F4, 0x108F5 },
 	{ 0x10900, 0x10915 },
 	{ 0x10920, 0x10939 },
 	{ 0x10980, 0x109B7 },
 	{ 0x109BE, 0x109BF },
 	{ 0x10A10, 0x10A13 },
 	{ 0x10A15, 0x10A17 },
-	{ 0x10A19, 0x10A33 },
+	{ 0x10A19, 0x10A35 },
 	{ 0x10A60, 0x10A7C },
 	{ 0x10A80, 0x10A9C },
 	{ 0x10AC0, 0x10AC7 },
@@ -507,7 +557,18 @@ static Rune alpha2[][2] = {
 	{ 0x10B60, 0x10B72 },
 	{ 0x10B80, 0x10B91 },
 	{ 0x10C00, 0x10C48 },
+	{ 0x10C80, 0x10CB2 },
+	{ 0x10CC0, 0x10CF2 },
+	{ 0x10D00, 0x10D23 },
+	{ 0x10E80, 0x10EA9 },
+	{ 0x10EB0, 0x10EB1 },
+	{ 0x10F00, 0x10F1C },
+	{ 0x10F30, 0x10F45 },
+	{ 0x10F70, 0x10F81 },
+	{ 0x10FB0, 0x10FC4 },
+	{ 0x10FE0, 0x10FF6 },
 	{ 0x11003, 0x11037 },
+	{ 0x11071, 0x11072 },
 	{ 0x11083, 0x110AF },
 	{ 0x110D0, 0x110E8 },
 	{ 0x11103, 0x11126 },
@@ -516,6 +577,11 @@ static Rune alpha2[][2] = {
 	{ 0x111C1, 0x111C4 },
 	{ 0x11200, 0x11211 },
 	{ 0x11213, 0x1122B },
+	{ 0x1123F, 0x11240 },
+	{ 0x11280, 0x11286 },
+	{ 0x1128A, 0x1128D },
+	{ 0x1128F, 0x1129D },
+	{ 0x1129F, 0x112A8 },
 	{ 0x112B0, 0x112DE },
 	{ 0x11305, 0x1130C },
 	{ 0x1130F, 0x11310 },
@@ -524,25 +590,66 @@ static Rune alpha2[][2] = {
 	{ 0x11332, 0x11333 },
 	{ 0x11335, 0x11339 },
 	{ 0x1135D, 0x11361 },
+	{ 0x11400, 0x11434 },
+	{ 0x11447, 0x1144A },
+	{ 0x1145F, 0x11461 },
 	{ 0x11480, 0x114AF },
 	{ 0x114C4, 0x114C5 },
 	{ 0x11580, 0x115AE },
+	{ 0x115D8, 0x115DB },
 	{ 0x11600, 0x1162F },
 	{ 0x11680, 0x116AA },
+	{ 0x11700, 0x1171A },
+	{ 0x11740, 0x11746 },
+	{ 0x11800, 0x1182B },
 	{ 0x118A0, 0x118DF },
-	{ 0x11AC0, 0x11AF8 },
-	{ 0x12000, 0x12398 },
-	{ 0x13000, 0x1342E },
+	{ 0x118FF, 0x11906 },
+	{ 0x1190C, 0x11913 },
+	{ 0x11915, 0x11916 },
+	{ 0x11918, 0x1192F },
+	{ 0x119A0, 0x119A7 },
+	{ 0x119AA, 0x119D0 },
+	{ 0x11A0B, 0x11A32 },
+	{ 0x11A5C, 0x11A89 },
+	{ 0x11AB0, 0x11AF8 },
+	{ 0x11C00, 0x11C08 },
+	{ 0x11C0A, 0x11C2E },
+	{ 0x11C72, 0x11C8F },
+	{ 0x11D00, 0x11D06 },
+	{ 0x11D08, 0x11D09 },
+	{ 0x11D0B, 0x11D30 },
+	{ 0x11D60, 0x11D65 },
+	{ 0x11D67, 0x11D68 },
+	{ 0x11D6A, 0x11D89 },
+	{ 0x11EE0, 0x11EF2 },
+	{ 0x11F04, 0x11F10 },
+	{ 0x11F12, 0x11F33 },
+	{ 0x12000, 0x12399 },
+	{ 0x12480, 0x12543 },
+	{ 0x12F90, 0x12FF0 },
+	{ 0x13000, 0x1342F },
+	{ 0x13441, 0x13446 },
+	{ 0x14400, 0x14646 },
 	{ 0x16800, 0x16A38 },
 	{ 0x16A40, 0x16A5E },
+	{ 0x16A70, 0x16ABE },
 	{ 0x16AD0, 0x16AED },
 	{ 0x16B00, 0x16B2F },
 	{ 0x16B40, 0x16B43 },
 	{ 0x16B63, 0x16B77 },
 	{ 0x16B7D, 0x16B8F },
-	{ 0x16F00, 0x16F44 },
+	{ 0x16E40, 0x16E7F },
+	{ 0x16F00, 0x16F4A },
 	{ 0x16F93, 0x16F9F },
-	{ 0x1B000, 0x1B001 },
+	{ 0x16FE0, 0x16FE1 },
+	{ 0x18800, 0x18CD5 },
+	{ 0x1AFF0, 0x1AFF3 },
+	{ 0x1AFF5, 0x1AFFB },
+	{ 0x1AFFD, 0x1AFFE },
+	{ 0x1B000, 0x1B122 },
+	{ 0x1B150, 0x1B152 },
+	{ 0x1B164, 0x1B167 },
+	{ 0x1B170, 0x1B2FB },
 	{ 0x1BC00, 0x1BC6A },
 	{ 0x1BC70, 0x1BC7C },
 	{ 0x1BC80, 0x1BC88 },
@@ -574,7 +681,20 @@ static Rune alpha2[][2] = {
 	{ 0x1D78A, 0x1D7A8 },
 	{ 0x1D7AA, 0x1D7C2 },
 	{ 0x1D7C4, 0x1D7CB },
+	{ 0x1DF00, 0x1DF1E },
+	{ 0x1DF25, 0x1DF2A },
+	{ 0x1E030, 0x1E06D },
+	{ 0x1E100, 0x1E12C },
+	{ 0x1E137, 0x1E13D },
+	{ 0x1E290, 0x1E2AD },
+	{ 0x1E2C0, 0x1E2EB },
+	{ 0x1E4D0, 0x1E4EB },
+	{ 0x1E7E0, 0x1E7E6 },
+	{ 0x1E7E8, 0x1E7EB },
+	{ 0x1E7ED, 0x1E7EE },
+	{ 0x1E7F0, 0x1E7FE },
 	{ 0x1E800, 0x1E8C4 },
+	{ 0x1E900, 0x1E943 },
 	{ 0x1EE00, 0x1EE03 },
 	{ 0x1EE05, 0x1EE1F },
 	{ 0x1EE21, 0x1EE22 },
@@ -610,16 +730,19 @@ static Rune alpha1[] = {
 	0x0950,
 	0x09BD,
 	0x09CE,
+	0x09FC,
 	0x0ABD,
 	0x0AD0,
+	0x0AF9,
 	0x0B3D,
 	0x0B71,
 	0x0BD0,
 	0x0C3D,
+	0x0C5D,
+	0x0C80,
 	0x0CBD,
 	0x0D3D,
 	0x0D4E,
-	0x0E8D,
 	0x0EBD,
 	0x0F00,
 	0x103F,
@@ -629,6 +752,7 @@ static Rune alpha1[] = {
 	0x17D7,
 	0x17DC,
 	0x1AA7,
+	0x1CFA,
 	0x2071,
 	0x207F,
 	0x2102,
@@ -638,30 +762,57 @@ static Rune alpha1[] = {
 	0x2D6F,
 	0x2E2F,
 	0x3400,
-	0x4DB5,
+	0x4DBF,
 	0x4E00,
-	0x9FCC,
-	0xA8FB,
 	0xA9CF,
 	0xAA7A,
 	0xAC00,
 	0xD7A3,
 	0x1083C,
 	0x10A00,
+	0x10F27,
+	0x11075,
+	0x11144,
+	0x11147,
 	0x11176,
-	0x111DA,
 	0x1133D,
+	0x11350,
 	0x11644,
-	0x118FF,
+	0x116B8,
+	0x11909,
+	0x11A00,
+	0x11A3A,
+	0x11A50,
+	0x11A9D,
+	0x11C40,
+	0x11D46,
+	0x11D98,
+	0x11FB0,
 	0x16F50,
+	0x17000,
+	0x187F7,
+	0x18D00,
+	0x18D08,
+	0x1B132,
+	0x1B155,
 	0x1D4A2,
+	0x1E14E,
+	0x1E94B,
 	0x1EE42,
 	0x20000,
-	0x2A6D6,
+	0x2A6DF,
 	0x2A700,
-	0x2B734,
+	0x2B739,
 	0x2B740,
 	0x2B81D,
+	0x2B820,
+	0x2CEA1,
+	0x2CEB0,
+	0x2EBE0,
+	0x30000,
+	0x3134A,
+	0x31350,
+	0x323AF,
 };
 
 int
diff --git a/libutf/isdigitrune.c b/libutf/isdigitrune.c
index 0dfb078..4e58c79 100644
--- a/libutf/isdigitrune.c
+++ b/libutf/isdigitrune.c
@@ -43,18 +43,32 @@ static Rune digit2[][2] = {
 	{ 0xABF0, 0xABF9 },
 	{ 0xFF10, 0xFF19 },
 	{ 0x104A0, 0x104A9 },
+	{ 0x10D30, 0x10D39 },
 	{ 0x11066, 0x1106F },
 	{ 0x110F0, 0x110F9 },
 	{ 0x11136, 0x1113F },
 	{ 0x111D0, 0x111D9 },
 	{ 0x112F0, 0x112F9 },
+	{ 0x11450, 0x11459 },
 	{ 0x114D0, 0x114D9 },
 	{ 0x11650, 0x11659 },
 	{ 0x116C0, 0x116C9 },
+	{ 0x11730, 0x11739 },
 	{ 0x118E0, 0x118E9 },
+	{ 0x11950, 0x11959 },
+	{ 0x11C50, 0x11C59 },
+	{ 0x11D50, 0x11D59 },
+	{ 0x11DA0, 0x11DA9 },
+	{ 0x11F50, 0x11F59 },
 	{ 0x16A60, 0x16A69 },
+	{ 0x16AC0, 0x16AC9 },
 	{ 0x16B50, 0x16B59 },
 	{ 0x1D7CE, 0x1D7FF },
+	{ 0x1E140, 0x1E149 },
+	{ 0x1E2F0, 0x1E2F9 },
+	{ 0x1E4F0, 0x1E4F9 },
+	{ 0x1E950, 0x1E959 },
+	{ 0x1FBF0, 0x1FBF9 },
 };
 
 int
diff --git a/libutf/lowerrune.c b/libutf/lowerrune.c
index df49f67..3649214 100644
--- a/libutf/lowerrune.c
+++ b/libutf/lowerrune.c
@@ -37,6 +37,9 @@ static Rune lower4[][2] = {
 	{ 0xA77F, 0xA787 },
 	{ 0xA791, 0xA793 },
 	{ 0xA797, 0xA7A9 },
+	{ 0xA7B5, 0xA7C3 },
+	{ 0xA7C8, 0xA7CA },
+	{ 0xA7D7, 0xA7D9 },
 };
 
 static Rune lower2[][3] = {
@@ -52,11 +55,10 @@ static Rune lower2[][3] = {
 	{ 0x0273, 0x0274, 0x0273 },
 	{ 0x0276, 0x027C, 0x0276 },
 	{ 0x027E, 0x027F, 0x027E },
-	{ 0x0281, 0x0282, 0x0281 },
 	{ 0x0284, 0x0286, 0x0284 },
 	{ 0x028A, 0x028B, 0x01B1 },
 	{ 0x028D, 0x0291, 0x028D },
-	{ 0x0295, 0x029D, 0x0295 },
+	{ 0x0295, 0x029C, 0x0295 },
 	{ 0x029F, 0x02AF, 0x029F },
 	{ 0x037B, 0x037D, 0x03FD },
 	{ 0x03AD, 0x03AF, 0x0388 },
@@ -66,10 +68,16 @@ static Rune lower2[][3] = {
 	{ 0x0430, 0x044F, 0x0410 },
 	{ 0x0450, 0x045F, 0x0400 },
 	{ 0x0561, 0x0586, 0x0531 },
+	{ 0x0587, 0x0588, 0x0587 },
+	{ 0x10D0, 0x10FA, 0x1C90 },
+	{ 0x10FD, 0x10FF, 0x1CBD },
+	{ 0x13F8, 0x13FD, 0x13F0 },
+	{ 0x1C83, 0x1C84, 0x0421 },
 	{ 0x1D00, 0x1D2B, 0x1D00 },
 	{ 0x1D6B, 0x1D77, 0x1D6B },
 	{ 0x1D7A, 0x1D7C, 0x1D7A },
-	{ 0x1D7E, 0x1D9A, 0x1D7E },
+	{ 0x1D7E, 0x1D8D, 0x1D7E },
+	{ 0x1D8F, 0x1D9A, 0x1D8F },
 	{ 0x1E96, 0x1E9A, 0x1E96 },
 	{ 0x1E9C, 0x1E9D, 0x1E9C },
 	{ 0x1F00, 0x1F07, 0x1F08 },
@@ -100,19 +108,27 @@ static Rune lower2[][3] = {
 	{ 0x210E, 0x210F, 0x210E },
 	{ 0x213C, 0x213D, 0x213C },
 	{ 0x2146, 0x2149, 0x2146 },
-	{ 0x2C30, 0x2C5E, 0x2C00 },
+	{ 0x2C30, 0x2C5F, 0x2C00 },
 	{ 0x2C77, 0x2C7B, 0x2C77 },
 	{ 0x2D00, 0x2D25, 0x10A0 },
 	{ 0xA730, 0xA731, 0xA730 },
 	{ 0xA771, 0xA778, 0xA771 },
-	{ 0xA794, 0xA795, 0xA794 },
-	{ 0xAB30, 0xAB5A, 0xAB30 },
-	{ 0xAB64, 0xAB65, 0xAB64 },
+	{ 0xAB30, 0xAB52, 0xAB30 },
+	{ 0xAB54, 0xAB5A, 0xAB54 },
+	{ 0xAB60, 0xAB68, 0xAB60 },
+	{ 0xAB70, 0xABBF, 0x13A0 },
 	{ 0xFB00, 0xFB06, 0xFB00 },
 	{ 0xFB13, 0xFB17, 0xFB13 },
 	{ 0xFF41, 0xFF5A, 0xFF21 },
 	{ 0x10428, 0x1044F, 0x10400 },
+	{ 0x104D8, 0x104FB, 0x104B0 },
+	{ 0x10597, 0x105A1, 0x10570 },
+	{ 0x105A3, 0x105B1, 0x1057C },
+	{ 0x105B3, 0x105B9, 0x1058C },
+	{ 0x105BB, 0x105BC, 0x10594 },
+	{ 0x10CC0, 0x10CF2, 0x10C80 },
 	{ 0x118C0, 0x118DF, 0x118A0 },
+	{ 0x16E60, 0x16E7F, 0x16E40 },
 	{ 0x1D41A, 0x1D433, 0x1D41A },
 	{ 0x1D44E, 0x1D454, 0x1D44E },
 	{ 0x1D456, 0x1D467, 0x1D456 },
@@ -139,6 +155,10 @@ static Rune lower2[][3] = {
 	{ 0x1D78A, 0x1D78F, 0x1D78A },
 	{ 0x1D7AA, 0x1D7C2, 0x1D7AA },
 	{ 0x1D7C4, 0x1D7C9, 0x1D7C4 },
+	{ 0x1DF00, 0x1DF09, 0x1DF00 },
+	{ 0x1DF0B, 0x1DF1E, 0x1DF0B },
+	{ 0x1DF25, 0x1DF2A, 0x1DF25 },
+	{ 0x1E922, 0x1E943, 0x1E900 },
 };
 
 static Rune lower1[][2] = {
@@ -198,7 +218,7 @@ static Rune lower1[][2] = {
 	{ 0x0267, 0x0267 },
 	{ 0x0268, 0x0197 },
 	{ 0x0269, 0x0196 },
-	{ 0x026A, 0x026A },
+	{ 0x026A, 0xA7AE },
 	{ 0x026B, 0x2C62 },
 	{ 0x026C, 0xA7AD },
 	{ 0x026F, 0x019C },
@@ -208,6 +228,8 @@ static Rune lower1[][2] = {
 	{ 0x0275, 0x019F },
 	{ 0x027D, 0x2C64 },
 	{ 0x0280, 0x01A6 },
+	{ 0x0281, 0x0281 },
+	{ 0x0282, 0xA7C5 },
 	{ 0x0283, 0x01A9 },
 	{ 0x0287, 0xA7B1 },
 	{ 0x0288, 0x01AE },
@@ -215,6 +237,7 @@ static Rune lower1[][2] = {
 	{ 0x028C, 0x0245 },
 	{ 0x0292, 0x01B7 },
 	{ 0x0293, 0x0293 },
+	{ 0x029D, 0xA7B2 },
 	{ 0x029E, 0xA7B0 },
 	{ 0x0377, 0x0376 },
 	{ 0x0390, 0x0390 },
@@ -236,9 +259,17 @@ static Rune lower1[][2] = {
 	{ 0x03FB, 0x03FA },
 	{ 0x03FC, 0x03FC },
 	{ 0x04CF, 0x04C0 },
-	{ 0x0587, 0x0587 },
+	{ 0x0560, 0x0560 },
+	{ 0x1C80, 0x0412 },
+	{ 0x1C81, 0x0414 },
+	{ 0x1C82, 0x041E },
+	{ 0x1C85, 0x0422 },
+	{ 0x1C86, 0x042A },
+	{ 0x1C87, 0x0462 },
+	{ 0x1C88, 0xA64A },
 	{ 0x1D79, 0xA77D },
 	{ 0x1D7D, 0x2C63 },
+	{ 0x1D8E, 0xA7C6 },
 	{ 0x1E9B, 0x1E60 },
 	{ 0x1E9F, 0x1E9F },
 	{ 0x1F50, 0x1F50 },
@@ -280,7 +311,15 @@ static Rune lower1[][2] = {
 	{ 0x2D2D, 0x10CD },
 	{ 0xA78C, 0xA78B },
 	{ 0xA78E, 0xA78E },
+	{ 0xA794, 0xA7C4 },
+	{ 0xA795, 0xA795 },
+	{ 0xA7AF, 0xA7AF },
+	{ 0xA7D1, 0xA7D0 },
+	{ 0xA7D3, 0xA7D3 },
+	{ 0xA7D5, 0xA7D5 },
+	{ 0xA7F6, 0xA7F5 },
 	{ 0xA7FA, 0xA7FA },
+	{ 0xAB53, 0xA7B3 },
 	{ 0x1D4BB, 0x1D4BB },
 	{ 0x1D7CB, 0x1D7CB },
 };
diff --git a/libutf/upperrune.c b/libutf/upperrune.c
index 3d40fb5..accc475 100644
--- a/libutf/upperrune.c
+++ b/libutf/upperrune.c
@@ -37,6 +37,9 @@ static Rune upper3[][2] = {
 	{ 0xA77E, 0xA786 },
 	{ 0xA790, 0xA792 },
 	{ 0xA796, 0xA7A8 },
+	{ 0xA7B4, 0xA7C2 },
+	{ 0xA7C7, 0xA7C9 },
+	{ 0xA7D6, 0xA7D8 },
 };
 
 static Rune upper2[][3] = {
@@ -55,6 +58,10 @@ static Rune upper2[][3] = {
 	{ 0x0410, 0x042F, 0x0430 },
 	{ 0x0531, 0x0556, 0x0561 },
 	{ 0x10A0, 0x10C5, 0x2D00 },
+	{ 0x13A0, 0x13EF, 0xAB70 },
+	{ 0x13F0, 0x13F5, 0x13F8 },
+	{ 0x1C90, 0x1CBA, 0x10D0 },
+	{ 0x1CBD, 0x1CBF, 0x10FD },
 	{ 0x1F08, 0x1F0F, 0x1F00 },
 	{ 0x1F18, 0x1F1D, 0x1F10 },
 	{ 0x1F28, 0x1F2F, 0x1F20 },
@@ -76,11 +83,18 @@ static Rune upper2[][3] = {
 	{ 0x212C, 0x212D, 0x212C },
 	{ 0x2130, 0x2131, 0x2130 },
 	{ 0x213E, 0x213F, 0x213E },
-	{ 0x2C00, 0x2C2E, 0x2C30 },
+	{ 0x2C00, 0x2C2F, 0x2C30 },
 	{ 0x2C7E, 0x2C7F, 0x023F },
 	{ 0xFF21, 0xFF3A, 0xFF41 },
 	{ 0x10400, 0x10427, 0x10428 },
+	{ 0x104B0, 0x104D3, 0x104D8 },
+	{ 0x10570, 0x1057A, 0x10597 },
+	{ 0x1057C, 0x1058A, 0x105A3 },
+	{ 0x1058C, 0x10592, 0x105B3 },
+	{ 0x10594, 0x10595, 0x105BB },
+	{ 0x10C80, 0x10CB2, 0x10CC0 },
 	{ 0x118A0, 0x118BF, 0x118C0 },
+	{ 0x16E40, 0x16E5F, 0x16E60 },
 	{ 0x1D400, 0x1D419, 0x1D400 },
 	{ 0x1D434, 0x1D44D, 0x1D434 },
 	{ 0x1D468, 0x1D481, 0x1D468 },
@@ -108,6 +122,7 @@ static Rune upper2[][3] = {
 	{ 0x1D71C, 0x1D734, 0x1D71C },
 	{ 0x1D756, 0x1D76E, 0x1D756 },
 	{ 0x1D790, 0x1D7A8, 0x1D790 },
+	{ 0x1E900, 0x1E921, 0x1E922 },
 };
 
 static Rune upper1[][2] = {
@@ -202,8 +217,16 @@ static Rune upper1[][2] = {
 	{ 0xA7AB, 0x025C },
 	{ 0xA7AC, 0x0261 },
 	{ 0xA7AD, 0x026C },
+	{ 0xA7AE, 0x026A },
 	{ 0xA7B0, 0x029E },
 	{ 0xA7B1, 0x0287 },
+	{ 0xA7B2, 0x029D },
+	{ 0xA7B3, 0xAB53 },
+	{ 0xA7C4, 0xA794 },
+	{ 0xA7C5, 0x0282 },
+	{ 0xA7C6, 0x1D8E },
+	{ 0xA7D0, 0xA7D1 },
+	{ 0xA7F5, 0xA7F6 },
 	{ 0x1D49C, 0x1D49C },
 	{ 0x1D4A2, 0x1D4A2 },
 	{ 0x1D546, 0x1D546 },
-- 
2.40.1


From 446903d68849d9db08c9d75d04c0b86f3bf63bf0 Mon Sep 17 00:00:00 2001
From: David Demelier <markand@malikania.fr>
Date: Wed, 23 Mar 2022 14:39:58 +0100
Subject: [PATCH 8/9] libutf: add some const's

---
 libutf/isalpharune.c  |  8 ++++----
 libutf/iscntrlrune.c  |  2 +-
 libutf/isdigitrune.c  |  2 +-
 libutf/isspacerune.c  |  4 ++--
 libutf/istitlerune.c  |  4 ++--
 libutf/lowerrune.c    |  8 ++++----
 libutf/mkrunetype.awk | 14 +++++++-------
 libutf/upperrune.c    |  8 ++++----
 8 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/libutf/isalpharune.c b/libutf/isalpharune.c
index 07811fc..9d1faff 100644
--- a/libutf/isalpharune.c
+++ b/libutf/isalpharune.c
@@ -4,7 +4,7 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune alpha3[][2] = {
+static const Rune alpha3[][2] = {
 	{ 0x00D6, 0x00D8 },
 	{ 0x00F6, 0x00F8 },
 	{ 0x02EC, 0x02EE },
@@ -201,7 +201,7 @@ static Rune alpha3[][2] = {
 	{ 0x1EEA9, 0x1EEAB },
 };
 
-static Rune alpha2[][2] = {
+static const Rune alpha2[][2] = {
 	{ 0x0041, 0x005A },
 	{ 0x0061, 0x007A },
 	{ 0x00C0, 0x00D6 },
@@ -715,7 +715,7 @@ static Rune alpha2[][2] = {
 	{ 0x2F800, 0x2FA1D },
 };
 
-static Rune alpha1[] = {
+static const Rune alpha1[] = {
 	0x00AA,
 	0x00B5,
 	0x00BA,
@@ -818,7 +818,7 @@ static Rune alpha1[] = {
 int
 isalpharune(Rune r)
 {
-	Rune *match;
+	const Rune *match;
 
 	if((match = bsearch(&r, alpha3, nelem(alpha3), sizeof *alpha3, &rune2cmp)))
 		return !((r - match[0]) % 2);
diff --git a/libutf/iscntrlrune.c b/libutf/iscntrlrune.c
index 286dce8..603e57c 100644
--- a/libutf/iscntrlrune.c
+++ b/libutf/iscntrlrune.c
@@ -4,7 +4,7 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune cntrl2[][2] = {
+static const Rune cntrl2[][2] = {
 	{ 0x0000, 0x001F },
 	{ 0x007F, 0x009F },
 };
diff --git a/libutf/isdigitrune.c b/libutf/isdigitrune.c
index 4e58c79..c8901bc 100644
--- a/libutf/isdigitrune.c
+++ b/libutf/isdigitrune.c
@@ -4,7 +4,7 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune digit2[][2] = {
+static const Rune digit2[][2] = {
 	{ 0x0030, 0x0039 },
 	{ 0x0660, 0x0669 },
 	{ 0x06F0, 0x06F9 },
diff --git a/libutf/isspacerune.c b/libutf/isspacerune.c
index bb8fe28..8583f93 100644
--- a/libutf/isspacerune.c
+++ b/libutf/isspacerune.c
@@ -4,14 +4,14 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune space2[][2] = {
+static const Rune space2[][2] = {
 	{ 0x0009, 0x000D },
 	{ 0x001C, 0x0020 },
 	{ 0x2000, 0x200A },
 	{ 0x2028, 0x2029 },
 };
 
-static Rune space1[] = {
+static const Rune space1[] = {
 	0x0085,
 	0x00A0,
 	0x1680,
diff --git a/libutf/istitlerune.c b/libutf/istitlerune.c
index 211a4aa..36b38d1 100644
--- a/libutf/istitlerune.c
+++ b/libutf/istitlerune.c
@@ -4,13 +4,13 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune title2[][2] = {
+static const Rune title2[][2] = {
 	{ 0x1F88, 0x1F8F },
 	{ 0x1F98, 0x1F9F },
 	{ 0x1FA8, 0x1FAF },
 };
 
-static Rune title1[] = {
+static const Rune title1[] = {
 	0x01C5,
 	0x01C8,
 	0x01CB,
diff --git a/libutf/lowerrune.c b/libutf/lowerrune.c
index 3649214..d91a364 100644
--- a/libutf/lowerrune.c
+++ b/libutf/lowerrune.c
@@ -4,7 +4,7 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune lower4[][2] = {
+static const Rune lower4[][2] = {
 	{ 0x0101, 0x012F },
 	{ 0x0133, 0x0137 },
 	{ 0x013A, 0x0148 },
@@ -42,7 +42,7 @@ static Rune lower4[][2] = {
 	{ 0xA7D7, 0xA7D9 },
 };
 
-static Rune lower2[][3] = {
+static const Rune lower2[][3] = {
 	{ 0x0061, 0x007A, 0x0041 },
 	{ 0x00E0, 0x00F6, 0x00C0 },
 	{ 0x00F8, 0x00FE, 0x00D8 },
@@ -161,7 +161,7 @@ static Rune lower2[][3] = {
 	{ 0x1E922, 0x1E943, 0x1E900 },
 };
 
-static Rune lower1[][2] = {
+static const Rune lower1[][2] = {
 	{ 0x00B5, 0x039C },
 	{ 0x00DF, 0x00DF },
 	{ 0x00FF, 0x0178 },
@@ -327,7 +327,7 @@ static Rune lower1[][2] = {
 int
 islowerrune(Rune r)
 {
-	Rune *match;
+	const Rune *match;
 
 	if((match = bsearch(&r, lower4, nelem(lower4), sizeof *lower4, &rune2cmp)))
 		return !((r - match[0]) % 2);
diff --git a/libutf/mkrunetype.awk b/libutf/mkrunetype.awk
index 3736e78..e01ea2c 100644
--- a/libutf/mkrunetype.awk
+++ b/libutf/mkrunetype.awk
@@ -129,7 +129,7 @@ function mkis(name, runev, runec, file, casev, casename) {
 
 	#generate list of laces 1
 	if(rune3c > 0) {
-		print "static Rune "name"3[][2] = {" > file;
+		print "static const Rune "name"3[][2] = {" > file;
 		for(j = 0; j < rune3c; j++) {
 			print "\t{ 0x"rune3v0[j]", 0x"rune3v1[j]" }," > file;
 		}
@@ -138,7 +138,7 @@ function mkis(name, runev, runec, file, casev, casename) {
 
 	#generate list of laces 2
 	if(rune4c > 0) {
-		print "static Rune "name"4[][2] = {" > file;
+		print "static const Rune "name"4[][2] = {" > file;
 		for(j = 0; j < rune4c; j++) {
 			print "\t{ 0x"rune4v0[j]", 0x"rune4v1[j]" }," > file;
 		}
@@ -148,12 +148,12 @@ function mkis(name, runev, runec, file, casev, casename) {
 	# generate list of ranges
 	if(rune2c > 0) {
 		if(length(casev) > 0) {
-			print "static Rune "name"2[][3] = {" > file;
+			print "static const Rune "name"2[][3] = {" > file;
 			for(j = 0; j < rune2c; j++) {
 				print "\t{ 0x"rune2v0[j]", 0x"rune2v1[j]", 0x"case2v[j]" }," > file;
 			}
 		} else {
-			print "static Rune "name"2[][2] = {" > file
+			print "static const Rune "name"2[][2] = {" > file
 			for(j = 0; j < rune2c; j++) {
 				print "\t{ 0x"rune2v0[j]", 0x"rune2v1[j]" }," > file;
 			}
@@ -164,12 +164,12 @@ function mkis(name, runev, runec, file, casev, casename) {
 	# generate list of singletons
 	if(rune1c > 0) {
 		if(length(casev) > 0) {
-			print "static Rune "name"1[][2] = {" > file;
+			print "static const Rune "name"1[][2] = {" > file;
 			for(j = 0; j < rune1c; j++) {
 				print "\t{ 0x"rune1v[j]", 0x"case1v[j]" }," > file;
 			}
 		} else {
-			print "static Rune "name"1[] = {" > file;
+			print "static const Rune "name"1[] = {" > file;
 			for(j = 0; j < rune1c; j++) {
 				print "\t0x"rune1v[j]"," > file;
 			}
@@ -179,7 +179,7 @@ function mkis(name, runev, runec, file, casev, casename) {
 	# generate lookup function
 	print "int\nis"name"rune(Rune r)\n{" > file;
 	if(rune4c > 0 || rune3c > 0)
-		print "\tRune *match;\n" > file;
+		print "\tconst Rune *match;\n" > file;
 	if(rune4c > 0) {
 		print "\tif((match = bsearch(&r, "name"4, nelem("name"4), sizeof *"name"4, &rune2cmp)))" > file;
 		print "\t\treturn !((r - match[0]) % 2);" > file;
diff --git a/libutf/upperrune.c b/libutf/upperrune.c
index accc475..0c874a8 100644
--- a/libutf/upperrune.c
+++ b/libutf/upperrune.c
@@ -4,7 +4,7 @@
 #include "../utf.h"
 #include "runetype.h"
 
-static Rune upper3[][2] = {
+static const Rune upper3[][2] = {
 	{ 0x0100, 0x012E },
 	{ 0x0132, 0x0136 },
 	{ 0x0139, 0x0147 },
@@ -42,7 +42,7 @@ static Rune upper3[][2] = {
 	{ 0xA7D6, 0xA7D8 },
 };
 
-static Rune upper2[][3] = {
+static const Rune upper2[][3] = {
 	{ 0x0041, 0x005A, 0x0061 },
 	{ 0x00C0, 0x00D6, 0x00E0 },
 	{ 0x00D8, 0x00DE, 0x00F8 },
@@ -125,7 +125,7 @@ static Rune upper2[][3] = {
 	{ 0x1E900, 0x1E921, 0x1E922 },
 };
 
-static Rune upper1[][2] = {
+static const Rune upper1[][2] = {
 	{ 0x0130, 0x0069 },
 	{ 0x0178, 0x00FF },
 	{ 0x0181, 0x0253 },
@@ -236,7 +236,7 @@ static Rune upper1[][2] = {
 int
 isupperrune(Rune r)
 {
-	Rune *match;
+	const Rune *match;
 
 	if((match = bsearch(&r, upper3, nelem(upper3), sizeof *upper3, &rune2cmp)))
 		return !((r - match[0]) % 2);
-- 
2.40.1


From 53040766d1a09baa7412c73c9a93afac2bfd6acc Mon Sep 17 00:00:00 2001
From: Richard Ipsum <richardipsum@fastmail.co.uk>
Date: Mon, 20 May 2019 09:36:32 +0100
Subject: [PATCH 9/9] cmp: Make output of error message POSIX compliant

From POSIX:

in the POSIX locale the following diagnostic message shall be written:

    "cmp: EOF on %s%s\n", <name of shorter file>, <additional info>

Amended by mcf: kept weprintf for consistency with other diagnostic
messages, but dropped the doubled prefix.
---
 cmp.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cmp.c b/cmp.c
index ea8902f..83ab149 100644
--- a/cmp.c
+++ b/cmp.c
@@ -57,7 +57,7 @@ main(int argc, char *argv[])
 			continue;
 		} else if (b[0] == EOF || b[1] == EOF) {
 			if (!sflag)
-				weprintf("cmp: EOF on %s\n", argv[(b[0] != EOF)]);
+				weprintf("EOF on %s\n", argv[(b[0] != EOF)]);
 			same = 0;
 			break;
 		} else if (!lflag) {
-- 
2.40.1

