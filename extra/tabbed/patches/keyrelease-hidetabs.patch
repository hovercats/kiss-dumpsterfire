--- ../tabbed-0.6/config.def.h
+++ ./config.def.h
@@ -50,9 +50,16 @@
 	{ MODKEY,                       XK_8,      move,           { .i = 7 } },
 	{ MODKEY,                       XK_9,      move,           { .i = 8 } },
 	{ MODKEY,                       XK_0,      move,           { .i = 9 } },
+	{ MODKEY,               XK_Shift_L, showbar,    { .i = 1  }  },
+	{ ShiftMask,            XK_Control_L, showbar,    { .i = 1  }  },
 
 	{ MODKEY,                       XK_q,      killclient,     { 0 } },
 
 	{ 0,                            XK_F11,    fullscreen,     { 0 } },
+};
+static Key keyreleases[] = {
+  /* modifier             key          function     argument */
+   { MODKEY|ShiftMask,     XK_Shift_L,  showbar,     { .i = 0  }  },
+   { MODKEY|ShiftMask,     XK_Control_L,  showbar,     { .i = 0  }  },
 };
 
--- ../tabbed-0.6/tabbed.c
+++ ./tabbed.c
@@ -111,6 +111,7 @@
 static void initfont(const char *fontstr);
 static Bool isprotodel(int c);
 static void keypress(const XEvent *e);
+static void keyrelease(const XEvent *e);
 static void killclient(const Arg *arg);
 static void manage(Window win);
 static void maprequest(const XEvent *e);
@@ -124,6 +125,7 @@
 static void setup(void);
 static void setcmd(int argc, char *argv[], int);
 static void sigchld(int unused);
+static void showbar(const Arg *arg);
 static void spawn(const Arg *arg);
 static int textnw(const char *text, unsigned int len);
 static void unmanage(int c);
@@ -144,10 +146,11 @@
 	[Expose] = expose,
 	[FocusIn] = focusin,
 	[KeyPress] = keypress,
+	[KeyRelease] = keyrelease,
 	[MapRequest] = maprequest,
 	[PropertyNotify] = propertynotify,
 };
-static int bh, wx, wy, ww, wh;
+static int bh, wx, wy, ww, wh, vbh;
 static unsigned int numlockmask = 0;
 static Bool running = True, nextfocus, doinitspawn = True,
 	    fillagain = False, closelastclient = False;
@@ -163,6 +166,7 @@
 static char **cmd = NULL;
 static char *wmname = "tabbed";
 static const char *geometry = NULL;
+static Bool barvisibility = False;
 
 char *argv0;
 
@@ -306,9 +310,18 @@
 void
 drawbar(void) {
 	unsigned long *col;
-	int c, fc, width, n = 0;
+	int c, fc, nbh, width, n = 0;
 	char *name = NULL;
+   nbh = barvisibility ? vbh : 0;
+   if (nbh != bh) {
+       bh = nbh;
+       for (c = 0; c < nclients; c++)
+           XMoveResizeWindow(dpy, clients[c]->win, 0, bh, ww, wh-bh);
+   
+	}
 
+   if (bh == 0) return;
+
 	if(nclients == 0) {
 		dc.x = 0;
 		dc.w = ww;
@@ -657,6 +670,22 @@
 }
 
 void
+keyrelease(const XEvent *e)
+{
+   const XKeyEvent *ev = &e->xkey;
+   unsigned int i;
+   KeySym keysym;
+
+   keysym = XkbKeycodeToKeysym(dpy, (KeyCode)ev->keycode, 0, 0);
+   for (i = 0; i < LENGTH(keyreleases); i++) {
+       if (keysym == keyreleases[i].keysym &&
+           CLEANMASK(keyreleases[i].mod) == CLEANMASK(ev->state) &&
+           keyreleases[i].func)
+           keyreleases[i].func(&(keyreleases[i].arg));
+		}
+	}
+
+void
 killclient(const Arg *arg) {
 	XEvent ev;
 
@@ -705,6 +734,18 @@
 			}
 		}
 
+       for (i = 0; i < LENGTH(keyreleases); i++) {
+           if ((code = XKeysymToKeycode(dpy, keyreleases[i].keysym))) {
+               for (j = 0; j < LENGTH(modifiers); j++) {
+                  XGrabKey(dpy, code, keyreleases[i].mod |
+                           modifiers[j], w, True,
+                            GrabModeAsync, GrabModeAsync);
+               
+				}
+			}
+		}
+
+
 		c = emallocz(sizeof(*c));
 		c->win = w;
 
@@ -980,7 +1021,7 @@
 	XMapRaised(dpy, win);
 	XSelectInput(dpy, win, SubstructureNotifyMask|FocusChangeMask|
 			ButtonPressMask|ExposureMask|KeyPressMask|PropertyChangeMask|
-			StructureNotifyMask|SubstructureRedirectMask);
+			KeyReleaseMask|StructureNotifyMask|SubstructureRedirectMask);
 	xerrorxlib = XSetErrorHandler(xerror);
 
 	class_hint.res_name = wmname;
@@ -1008,6 +1049,13 @@
 	nextfocus = foreground;
 	focus(-1);
 }
+void
+showbar(const Arg *arg)
+{
+   barvisibility = arg->i;
+   drawbar();
+
+	}
 
 void
 sigchld(int unused) {
